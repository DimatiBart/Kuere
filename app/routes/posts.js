var express = require('express');
var router  = express.Router();
var passport = require('passport');
var shortid = require('shortid');
var mixer = require('../helpers/mixer');

var Post = require('../models/Post');
var Coordinate = require('../models/Coordinate');
var User = require('../models/User');
var Img = require('../models/Img');
var Tag = require('../models/Tag');

router.post('/create', function createPost(req, res, next) {
  if (!req.isAuthenticated()) {
    res.redirect('/auth');
    return;
  }

  var user = req.body.user; // TODO: pass here current user object;
  var postToCreate = req.body.post; // TODO: pass here sent data object;

  var coordinate = new Coordinate();
  coordinate.id = shortid.generate();
  coordinate.latitude = postToCreate.latitude;
  coordinate.longtitude = postToCreate.longtitude;
  coordinate.save();

  var tags; // TODO: it should be one tag per item ?

  var img = new Img();
  img.id = shortid.generate();
  img.src = postToCreate.linkToImage;
  img.save();

  var post = new Post();
  post.id = shortid.generate();
  post.title = postToCreate.title;
  post.description = postToCreate.description;
  post.type = postToCreate.type;
  post.date = postToCreate.date; // TODO: or it should be generated by server ?

  post.coordinate_id = coordinate.id;
  post.user_id = user.id;
  post.img_id = img.id;

  // post.tag_id = tag.id;
  post.save();

  res.status(200).send();
});

router.post('/edit', function editPostById(req, res, next) {
  if (!req.isAuthenticated()) {
    res.redirect('/auth');
    return;
  }

  var user = req.body.user;
  var postToEdit = req.body.post;

  Post
  .where({ id: postToEdit.id })
  .findOne()
  .then(function (post) {
    var deferred = {
      promises: [
        Coordinate.where({ id: post.coordinate_id }),
        Img.where({ id: post.img_id }),
      ],
      currentlyResolved: 0,
      resolve: function () {
        if (++currentlyResolved === promises.length - 1) {
          // resolved!
          res.status(200).send();
        }
      },
    };

    deferred.promises.forEach(function (promise, index) {
      promise
        .findOne()
        .then(function (data) {
          if (index === 0) {
            data.latitude = postToEdit.latutude;
            data.longtitude = postToEdit.longtitude;
          } else if (index === 1) {
            data.src = postToEdit.src;
          }

          data.save();
          deferred.resolve();
        });
    })
  });
});

router.get('/:postId', function getPostById(req, res, next) {
  if (!req.isAuthenticated()) {
    res.redirect('/auth');
    return;
  }

  Post
    .where({ id: req.params.id })
    .findOne()
    .then(function (post) {
      var deferred = {
        promises: [
          Coordinate.where({ id: post.coordinate_id }),
          User.where({ id: post.user_id }),
          Img.where({ id: post.img_id }),
        ],
        currentlyResolved: 0,
        resolve: function () {
          if (++currentlyResolved === promises.length - 1) {
            res.render('post', {
              post: post,
            });
          }
        },
      };

      promises.collection.forEach(function (promise) {
        promise.findOne().then(function (data) {
          mixer.mix(post, data);
          promises.resolve();
        });
      });
    });
});

router.delete('/:postId', function deletePostById(req, res, next) {
  Post
    .where({ id: req.params.postId })
    .findOneAndRemove()
    .then(function resolved(deletedPost) {
      res.status(200).send();
    })
    .catch(function rejected(error) {
      res.status(404).send();
    });
});

module.exports = router;
